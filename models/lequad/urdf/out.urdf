<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from lequad_base.xacro              | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="lequad">
  <link name="base_link"/>
  <joint name="base_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="base_link_inertia"/>
  </joint>
  <link name="base_link_inertia">
    <inertial>
      <mass value="1.5"/>
      <!-- [kg] -->
      <origin xyz="0 0 0"/>
      <inertia ixx="0.0347563" ixy="0.0" ixz="0.0" iyy="0.0458929" iyz="0.0" izz="0.0977"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="model://lequad/meshes/lequad.stl" scale="1 1 1"/>
      </geometry>
    </visual>
    <!-- This collision model prevents: a) physical collisions b) spawned drones falling -->
    <collision>
      <origin rpy="0 0 0" xyz="0.135 0.135 -0.085"/>
      <geometry>
        <sphere radius="0.00001"/>
      </geometry>
    </collision>
    <collision>
      <origin rpy="0 0 0" xyz="0.135 -0.135 -0.085"/>
      <geometry>
        <sphere radius="0.00001"/>
      </geometry>
    </collision>
    <collision>
      <origin rpy="0 0 0" xyz="-0.135 0.135 -0.085"/>
      <geometry>
        <sphere radius="0.00001"/>
      </geometry>
    </collision>
    <collision>
      <origin rpy="0 0 0" xyz="-0.135 -0.135 -0.085"/>
      <geometry>
        <sphere radius="0.00001"/>
      </geometry>
    </collision>
  </link>
  <!-- attach multirotor_base_plugin to the base_link -->
  <gazebo>
    <plugin filename="libgazebo_multirotor_base_plugin.so" name="rosbag">
      <robotNamespace>drone_1</robotNamespace>
      <linkName>base_link</linkName>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <gazebo reference="base_link">
    <material>Gazebo/DarkGrey</material>
    <collision name="base_link_inertia_collision">
      <surface>
        <contact>
          <ode>
            <min_depth>0.001</min_depth>
            <max_vel>0.0</max_vel>
          </ode>
        </contact>
        <friction>
          <ode/>
        </friction>
      </surface>
    </collision>
  </gazebo>
  <joint name="rotor_0_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0.135 -0.135 0.033"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="base_link"/>
    <child link="rotor_0"/>
  </joint>
  <!-- TODO(ff): not currently set because it's not yet supported -->
  <!-- <gazebo reference="rotor_${motor_number}_joint"> <axis> <xyz>0 0 1</xyz>
      <limit> <velocity> ${max_rot_velocity} </velocity> </limit> </axis> </gazebo> -->
  <link name="rotor_0">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.75e-07" ixy="0.0" ixz="0.0" iyy="0.00013175766666666667" iyz="0.0" izz="0.00013265766666666667"/>
    </inertial>
    <visual>
      <geometry>
        <!-- <cylinder length="0.005" radius="${radius_rotor}"/> -->
        <!-- [m] -->
        <!-- <mesh filename="package://rotors_description/meshes/propeller_${direction}.dae" -->
        <!-- <mesh filename="package://rotors_description/meshes/${mesh}_${direction}.dae" scale="${mesh_scale}" /> -->
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
        <mesh filename="model://lequad/meshes/lequad_prop_ccw.stl" scale="1 1 1"/>
      </geometry>
    </visual>
    <!-- <collision>
        <geometry>
          <cylinder length="0.005" radius="${radius_rotor}" />
        </geometry>
      </collision> -->
  </link>
  <gazebo>
    <plugin filename="libgazebo_motor_model.so" name="front_right_motor_model">
      <robotNamespace>drone_1</robotNamespace>
      <jointName>rotor_0_joint</jointName>
      <linkName>rotor_0</linkName>
      <turningDirection>ccw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>1100</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.06</momentConstant>
      <commandSubTopic>/gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>0</motorNumber>
      <rotorDragCoefficient>0.000806428</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>/motor_speed/0</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
      <!--
        <gazebo_joint_control_pid>
          <p>0.1</p>
          <i>0</i>
          <d>0</d>
          <iMax>0</iMax>
          <iMin>0</iMin>
          <cmdMax>3</cmdMax>
          <cmdMin>-3</cmdMin>
        </gazebo_joint_control_pid>
      -->
    </plugin>
  </gazebo>
  <gazebo reference="rotor_0">
    <material>Gazebo/Red</material>
  </gazebo>
  <joint name="rotor_1_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.135 0.135 0.033"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="base_link"/>
    <child link="rotor_1"/>
  </joint>
  <!-- TODO(ff): not currently set because it's not yet supported -->
  <!-- <gazebo reference="rotor_${motor_number}_joint"> <axis> <xyz>0 0 1</xyz>
      <limit> <velocity> ${max_rot_velocity} </velocity> </limit> </axis> </gazebo> -->
  <link name="rotor_1">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.75e-07" ixy="0.0" ixz="0.0" iyy="0.00013175766666666667" iyz="0.0" izz="0.00013265766666666667"/>
    </inertial>
    <visual>
      <geometry>
        <!-- <cylinder length="0.005" radius="${radius_rotor}"/> -->
        <!-- [m] -->
        <!-- <mesh filename="package://rotors_description/meshes/propeller_${direction}.dae" -->
        <!-- <mesh filename="package://rotors_description/meshes/${mesh}_${direction}.dae" scale="${mesh_scale}" /> -->
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
        <mesh filename="model://lequad/meshes/lequad_prop_ccw.stl" scale="1 1 1"/>
      </geometry>
    </visual>
    <!-- <collision>
        <geometry>
          <cylinder length="0.005" radius="${radius_rotor}" />
        </geometry>
      </collision> -->
  </link>
  <gazebo>
    <plugin filename="libgazebo_motor_model.so" name="back_left_motor_model">
      <robotNamespace>drone_1</robotNamespace>
      <jointName>rotor_1_joint</jointName>
      <linkName>rotor_1</linkName>
      <turningDirection>ccw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>1100</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.06</momentConstant>
      <commandSubTopic>/gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>1</motorNumber>
      <rotorDragCoefficient>0.000806428</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>/motor_speed/1</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
      <!--
        <gazebo_joint_control_pid>
          <p>0.1</p>
          <i>0</i>
          <d>0</d>
          <iMax>0</iMax>
          <iMin>0</iMin>
          <cmdMax>3</cmdMax>
          <cmdMin>-3</cmdMin>
        </gazebo_joint_control_pid>
      -->
    </plugin>
  </gazebo>
  <gazebo reference="rotor_1">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <joint name="rotor_2_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0.135 0.135 0.033"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="base_link"/>
    <child link="rotor_2"/>
  </joint>
  <!-- TODO(ff): not currently set because it's not yet supported -->
  <!-- <gazebo reference="rotor_${motor_number}_joint"> <axis> <xyz>0 0 1</xyz>
      <limit> <velocity> ${max_rot_velocity} </velocity> </limit> </axis> </gazebo> -->
  <link name="rotor_2">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.75e-07" ixy="0.0" ixz="0.0" iyy="0.00013175766666666667" iyz="0.0" izz="0.00013265766666666667"/>
    </inertial>
    <visual>
      <geometry>
        <!-- <cylinder length="0.005" radius="${radius_rotor}"/> -->
        <!-- [m] -->
        <!-- <mesh filename="package://rotors_description/meshes/propeller_${direction}.dae" -->
        <!-- <mesh filename="package://rotors_description/meshes/${mesh}_${direction}.dae" scale="${mesh_scale}" /> -->
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
        <mesh filename="model://lequad/meshes/lequad_prop_cw.stl" scale="1 1 1"/>
      </geometry>
    </visual>
    <!-- <collision>
        <geometry>
          <cylinder length="0.005" radius="${radius_rotor}" />
        </geometry>
      </collision> -->
  </link>
  <gazebo>
    <plugin filename="libgazebo_motor_model.so" name="front_left_motor_model">
      <robotNamespace>drone_1</robotNamespace>
      <jointName>rotor_2_joint</jointName>
      <linkName>rotor_2</linkName>
      <turningDirection>cw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>1100</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.06</momentConstant>
      <commandSubTopic>/gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>2</motorNumber>
      <rotorDragCoefficient>0.000806428</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>/motor_speed/2</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
      <!--
        <gazebo_joint_control_pid>
          <p>0.1</p>
          <i>0</i>
          <d>0</d>
          <iMax>0</iMax>
          <iMin>0</iMin>
          <cmdMax>3</cmdMax>
          <cmdMin>-3</cmdMin>
        </gazebo_joint_control_pid>
      -->
    </plugin>
  </gazebo>
  <gazebo reference="rotor_2">
    <material>Gazebo/Red</material>
  </gazebo>
  <joint name="rotor_3_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.135 -0.135 0.033"/>
    <axis xyz="0 0 1"/>
    <!-- TODO(ff): not currently set because it's not yet supported -->
    <!-- <limit effort="2000" velocity="${max_rot_velocity}" /> -->
    <parent link="base_link"/>
    <child link="rotor_3"/>
  </joint>
  <!-- TODO(ff): not currently set because it's not yet supported -->
  <!-- <gazebo reference="rotor_${motor_number}_joint"> <axis> <xyz>0 0 1</xyz>
      <limit> <velocity> ${max_rot_velocity} </velocity> </limit> </axis> </gazebo> -->
  <link name="rotor_3">
    <inertial>
      <mass value="0.005"/>
      <!-- [kg] -->
      <inertia ixx="9.75e-07" ixy="0.0" ixz="0.0" iyy="0.00013175766666666667" iyz="0.0" izz="0.00013265766666666667"/>
    </inertial>
    <visual>
      <geometry>
        <!-- <cylinder length="0.005" radius="${radius_rotor}"/> -->
        <!-- [m] -->
        <!-- <mesh filename="package://rotors_description/meshes/propeller_${direction}.dae" -->
        <!-- <mesh filename="package://rotors_description/meshes/${mesh}_${direction}.dae" scale="${mesh_scale}" /> -->
        <!-- <box size="${2*radius_rotor} 0.01 0.005"/> -->
        <mesh filename="model://lequad/meshes/lequad_prop_cw.stl" scale="1 1 1"/>
      </geometry>
    </visual>
    <!-- <collision>
        <geometry>
          <cylinder length="0.005" radius="${radius_rotor}" />
        </geometry>
      </collision> -->
  </link>
  <gazebo>
    <plugin filename="libgazebo_motor_model.so" name="back_right_motor_model">
      <robotNamespace>drone_1</robotNamespace>
      <jointName>rotor_3_joint</jointName>
      <linkName>rotor_3</linkName>
      <turningDirection>cw</turningDirection>
      <timeConstantUp>0.0125</timeConstantUp>
      <timeConstantDown>0.025</timeConstantDown>
      <maxRotVelocity>1100</maxRotVelocity>
      <motorConstant>8.54858e-06</motorConstant>
      <momentConstant>0.06</momentConstant>
      <commandSubTopic>/gazebo/command/motor_speed</commandSubTopic>
      <motorNumber>3</motorNumber>
      <rotorDragCoefficient>0.000806428</rotorDragCoefficient>
      <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
      <motorSpeedPubTopic>/motor_speed/3</motorSpeedPubTopic>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
      <!--
        <gazebo_joint_control_pid>
          <p>0.1</p>
          <i>0</i>
          <d>0</d>
          <iMax>0</iMax>
          <iMin>0</iMin>
          <cmdMax>3</cmdMax>
          <cmdMin>-3</cmdMin>
        </gazebo_joint_control_pid>
      -->
    </plugin>
  </gazebo>
  <gazebo reference="rotor_3">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <link name="camera_front_link">
  </link>
  <link name="camera_front_optical">
    </link>
  <joint name="camera_front_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.22 0 0"/>
    <parent link="base_link"/>
    <child link="camera_front_link"/>
  </joint>
  <joint name="camera_front_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="camera_front_link"/>
    <child link="camera_front_optical"/>
  </joint>
  <gazebo reference="camera_front_link">
    <sensor name="camera_front" type="wideanglecamera">
      <update_rate>10</update_rate>
      <camera name="head">
        <horizontal_fov>2.7480916030534353</horizontal_fov>
        <image>
          <width>720</width>
          <height>540</height>
          <format>L8</format>
        </image>
        <clip>
          <near>0.01</near>
          <far>100</far>
        </clip>
        <lens>
          <!-- Type of lens mapping [default: stereographic] -->
          <type>custom</type>
          <!-- The following corresponds to equidistant projection with different angle scaling -->
          <custom_function>
            <c1>1.0</c1>
            <c2>2.0</c2>
            <!-- default for equidistant: c2 = 1 -->
            <c3>0.0</c3>
            <f>1.0</f>
            <fun>id</fun>
          </custom_function>
          <!-- If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters [default: true] -->
          <scale_to_hfov>true</scale_to_hfov>
          <!-- Everything outside the specified angle will be hidden [default: 1.5707] -->
          <cutoff_angle>2.7480916030534353</cutoff_angle>
          <!-- Resolution of the environment cube map used to draw the world [default: 256] -->
          <env_texture_size>512</env_texture_size>
        </lens>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_front_controller">
        <robotNamespace>drone_1</robotNamespace>
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <cameraName>camera_front</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_front_optical</frameName>
        <hackBaseline>0.0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="drone_1/camera_front_link">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <link name="camera_right_link">
  </link>
  <link name="camera_right_optical">
    </link>
  <joint name="camera_right_joint" type="fixed">
    <origin rpy="0 0 -1.5707963267948966" xyz="0 -0.22 0"/>
    <parent link="base_link"/>
    <child link="camera_right_link"/>
  </joint>
  <joint name="camera_right_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="camera_right_link"/>
    <child link="camera_right_optical"/>
  </joint>
  <gazebo reference="camera_right_link">
    <sensor name="camera_right" type="wideanglecamera">
      <update_rate>10</update_rate>
      <camera name="head">
        <horizontal_fov>2.7480916030534353</horizontal_fov>
        <image>
          <width>720</width>
          <height>540</height>
          <format>L8</format>
        </image>
        <clip>
          <near>0.01</near>
          <far>100</far>
        </clip>
        <lens>
          <!-- Type of lens mapping [default: stereographic] -->
          <type>custom</type>
          <!-- The following corresponds to equidistant projection with different angle scaling -->
          <custom_function>
            <c1>1.0</c1>
            <c2>2.0</c2>
            <!-- default for equidistant: c2 = 1 -->
            <c3>0.0</c3>
            <f>1.0</f>
            <fun>id</fun>
          </custom_function>
          <!-- If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters [default: true] -->
          <scale_to_hfov>true</scale_to_hfov>
          <!-- Everything outside the specified angle will be hidden [default: 1.5707] -->
          <cutoff_angle>2.7480916030534353</cutoff_angle>
          <!-- Resolution of the environment cube map used to draw the world [default: 256] -->
          <env_texture_size>512</env_texture_size>
        </lens>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_right_controller">
        <robotNamespace>drone_1</robotNamespace>
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <cameraName>camera_right</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_right_optical</frameName>
        <hackBaseline>0.0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="drone_1/camera_right_link">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <link name="camera_back_link">
  </link>
  <link name="camera_back_optical">
    </link>
  <joint name="camera_back_joint" type="fixed">
    <origin rpy="0 0 -3.141592653589793" xyz="-0.22 0 0"/>
    <parent link="base_link"/>
    <child link="camera_back_link"/>
  </joint>
  <joint name="camera_back_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="camera_back_link"/>
    <child link="camera_back_optical"/>
  </joint>
  <gazebo reference="camera_back_link">
    <sensor name="camera_back" type="wideanglecamera">
      <update_rate>10</update_rate>
      <camera name="head">
        <horizontal_fov>2.7480916030534353</horizontal_fov>
        <image>
          <width>720</width>
          <height>540</height>
          <format>L8</format>
        </image>
        <clip>
          <near>0.01</near>
          <far>100</far>
        </clip>
        <lens>
          <!-- Type of lens mapping [default: stereographic] -->
          <type>custom</type>
          <!-- The following corresponds to equidistant projection with different angle scaling -->
          <custom_function>
            <c1>1.0</c1>
            <c2>2.0</c2>
            <!-- default for equidistant: c2 = 1 -->
            <c3>0.0</c3>
            <f>1.0</f>
            <fun>id</fun>
          </custom_function>
          <!-- If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters [default: true] -->
          <scale_to_hfov>true</scale_to_hfov>
          <!-- Everything outside the specified angle will be hidden [default: 1.5707] -->
          <cutoff_angle>2.7480916030534353</cutoff_angle>
          <!-- Resolution of the environment cube map used to draw the world [default: 256] -->
          <env_texture_size>512</env_texture_size>
        </lens>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_back_controller">
        <robotNamespace>drone_1</robotNamespace>
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <cameraName>camera_back</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_back_optical</frameName>
        <hackBaseline>0.0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="drone_1/camera_back_link">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <link name="camera_left_link">
  </link>
  <link name="camera_left_optical">
    </link>
  <joint name="camera_left_joint" type="fixed">
    <origin rpy="0 0 -4.71238898038469" xyz="0 0.22 0"/>
    <parent link="base_link"/>
    <child link="camera_left_link"/>
  </joint>
  <joint name="camera_left_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="camera_left_link"/>
    <child link="camera_left_optical"/>
  </joint>
  <gazebo reference="camera_left_link">
    <sensor name="camera_left" type="wideanglecamera">
      <update_rate>10</update_rate>
      <camera name="head">
        <horizontal_fov>2.7480916030534353</horizontal_fov>
        <image>
          <width>720</width>
          <height>540</height>
          <format>L8</format>
        </image>
        <clip>
          <near>0.01</near>
          <far>100</far>
        </clip>
        <lens>
          <!-- Type of lens mapping [default: stereographic] -->
          <type>custom</type>
          <!-- The following corresponds to equidistant projection with different angle scaling -->
          <custom_function>
            <c1>1.0</c1>
            <c2>2.0</c2>
            <!-- default for equidistant: c2 = 1 -->
            <c3>0.0</c3>
            <f>1.0</f>
            <fun>id</fun>
          </custom_function>
          <!-- If true the image will be scaled to fit horizontal FOV, otherwise it will be shown according to projection type parameters [default: true] -->
          <scale_to_hfov>true</scale_to_hfov>
          <!-- Everything outside the specified angle will be hidden [default: 1.5707] -->
          <cutoff_angle>2.7480916030534353</cutoff_angle>
          <!-- Resolution of the environment cube map used to draw the world [default: 256] -->
          <env_texture_size>512</env_texture_size>
        </lens>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_left_controller">
        <robotNamespace>drone_1</robotNamespace>
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <cameraName>camera_left</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_left_optical</frameName>
        <hackBaseline>0.0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo reference="drone_1/camera_left_link">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <gazebo>
    <sensor name="gps" type="gps">
      <pose>0 0 0 0 0 0</pose>
      <plugin filename="libgazebo_gps_plugin.so" name="gps_plugin">
        <robotNamespace>drone_1</robotNamespace>
        <gpsNoise>True</gpsNoise>
        <gpsXYRandomWalk>2.0</gpsXYRandomWalk>
        <gpsZRandomWalk>4.0</gpsZRandomWalk>
        <gpsXYNoiseDensity>0.0002</gpsXYNoiseDensity>
        <gpsZNoiseDensity>0.0004</gpsZNoiseDensity>
        <gpsVXYNoiseDensity>0.2</gpsVXYNoiseDensity>
        <gpsVZNoiseDensity>0.4</gpsVZNoiseDensity>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_magnetometer_plugin.so" name="magnetometer_plugin">
      <robotNamespace>drone_1</robotNamespace>
      <pubRate>20</pubRate>
      <noiseDensity>0.0004</noiseDensity>
      <randomWalk>6.4e-06</randomWalk>
      <biasCorrelationTime>600</biasCorrelationTime>
      <magTopic>/mag</magTopic>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_barometer_plugin.so" name="barometer_plugin">
      <robotNamespace>drone_1</robotNamespace>
      <pubRate>10</pubRate>
      <baroTopic>/baro</baroTopic>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_mavlink_interface.so" name="mavlink_interface">
      <robotNamespace>drone_1</robotNamespace>
      <imuSubTopic>/imu</imuSubTopic>
      <gpsSubTopic>/gps</gpsSubTopic>
      <magSubTopic>/mag</magSubTopic>
      <baroSubTopic>/baro</baroSubTopic>
      <mavlink_addr>INADDR_ANY</mavlink_addr>
      <mavlink_udp_port>14560</mavlink_udp_port>
      <mavlink_tcp_port>4560</mavlink_tcp_port>
      <serialEnabled>false</serialEnabled>
      <serialDevice>/dev/ttyACM0</serialDevice>
      <baudRate>921600</baudRate>
      <qgc_addr>INADDR_ANY</qgc_addr>
      <qgc_udp_port>14550</qgc_udp_port>
      <sdk_addr>INADDR_ANY</sdk_addr>
      <sdk_udp_port>15540</sdk_udp_port>
      <hil_mode>false</hil_mode>
      <hil_state_level>false</hil_state_level>
      <vehicle_is_tailsitter>false</vehicle_is_tailsitter>
      <send_vision_estimation>false</send_vision_estimation>
      <send_odometry>false</send_odometry>
      <enable_lockstep>true</enable_lockstep>
      <use_tcp>true</use_tcp>
      <motorSpeedCommandPubTopic>/gazebo/command/motor_speed</motorSpeedCommandPubTopic>
      <control_channels>
        <channel name="rotor1">
          <input_index>0</input_index>
          <input_offset>0</input_offset>
          <input_scaling>1000</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>100</zero_position_armed>
          <joint_control_type>velocity</joint_control_type>
        </channel>
        <channel name="rotor2">
          <input_index>1</input_index>
          <input_offset>0</input_offset>
          <input_scaling>1000</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>100</zero_position_armed>
          <joint_control_type>velocity</joint_control_type>
        </channel>
        <channel name="rotor3">
          <input_index>2</input_index>
          <input_offset>0</input_offset>
          <input_scaling>1000</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>100</zero_position_armed>
          <joint_control_type>velocity</joint_control_type>
        </channel>
        <channel name="rotor4">
          <input_index>3</input_index>
          <input_offset>0</input_offset>
          <input_scaling>1000</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>100</zero_position_armed>
          <joint_control_type>velocity</joint_control_type>
        </channel>
        <channel name="rotor5">
          <input_index>4</input_index>
          <input_offset>1</input_offset>
          <input_scaling>324.6</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>velocity</joint_control_type>
          <joint_control_pid>
            <p>0.1</p>
            <i>0</i>
            <d>0</d>
            <iMax>0.0</iMax>
            <iMin>0.0</iMin>
            <cmdMax>2</cmdMax>
            <cmdMin>-2</cmdMin>
          </joint_control_pid>
          <joint_name>zephyr_delta_wing::propeller_joint</joint_name>
        </channel>
        <channel name="rotor6">
          <input_index>5</input_index>
          <input_offset>0</input_offset>
          <!-- joint limits [-0.524, 0.524] -->
          <input_scaling>0.524</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>position</joint_control_type>
          <joint_name>zephyr_delta_wing::flap_left_joint</joint_name>
          <joint_control_pid>
            <p>10.0</p>
            <i>0</i>
            <d>0</d>
            <iMax>0</iMax>
            <iMin>0</iMin>
            <cmdMax>20</cmdMax>
            <cmdMin>-20</cmdMin>
          </joint_control_pid>
        </channel>
        <channel name="rotor7">
          <input_index>6</input_index>
          <input_offset>0</input_offset>
          <!-- joint limits [-0.524, 0.524] -->
          <input_scaling>0.524</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>position</joint_control_type>
          <joint_name>zephyr_delta_wing::flap_right_joint</joint_name>
          <joint_control_pid>
            <p>10.0</p>
            <i>0</i>
            <d>0</d>
            <iMax>0</iMax>
            <iMin>0</iMin>
            <cmdMax>20</cmdMax>
            <cmdMin>-20</cmdMin>
          </joint_control_pid>
        </channel>
        <channel name="rotor8">
          <input_index>7</input_index>
          <input_offset>0</input_offset>
          <input_scaling>0.524</input_scaling>
          <zero_position_disarmed>0</zero_position_disarmed>
          <zero_position_armed>0</zero_position_armed>
          <joint_control_type>position</joint_control_type>
        </channel>
      </control_channels>
    </plugin>
  </gazebo>
  <!-- IMU link -->
  <link name="drone_1/imu_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- IMU joint -->
  <joint name="drone_1/imu_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="drone_1/imu_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo>
    <plugin filename="libgazebo_imu_plugin.so" name="rotors_gazebo_imu_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
      <robotNamespace>drone_1</robotNamespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <linkName>drone_1/imu_link</linkName>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <imuTopic>/imu</imuTopic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <gyroscopeNoiseDensity>0.0003394</gyroscopeNoiseDensity>
      <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
      <gyroscopeRandomWalk>3.8785e-05</gyroscopeRandomWalk>
      <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
      <gyroscopeBiasCorrelationTime>1000.0</gyroscopeBiasCorrelationTime>
      <!-- Gyroscope bias correlation time constant [s] -->
      <gyroscopeTurnOnBiasSigma>0.0087</gyroscopeTurnOnBiasSigma>
      <!-- Gyroscope turn on bias standard deviation [rad/s] -->
      <accelerometerNoiseDensity>0.004</accelerometerNoiseDensity>
      <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
      <accelerometerRandomWalk>0.006</accelerometerRandomWalk>
      <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
      <accelerometerBiasCorrelationTime>300.0</accelerometerBiasCorrelationTime>
      <!-- Accelerometer bias correlation time constant [s] -->
      <accelerometerTurnOnBiasSigma>0.196</accelerometerTurnOnBiasSigma>
      <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
    </plugin>
  </gazebo>
</robot>

